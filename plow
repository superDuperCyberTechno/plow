#!/bin/bash

# Check if domain is provided
if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <domain> [additional_subdomains...]"
    echo "Usage: $0 <domain> [@subdomains_file] [additional_subdomains...]"
    echo "Example: $0 example.com"
    echo "Example: $0 example.com @subdomains.txt"
    echo "Example: $0 example.com api blog shop"
    echo "Example: $0 example.com @subdomains.txt api blog"
    exit 1
fi

DOMAIN="$1"
shift  # Remove domain from arguments

# Check if first argument is a file (starts with @)
ADDITIONAL_SUBDOMAINS_FILE=""
if [ "$#" -gt 0 ] && [[ "$1" == @* ]]; then
    ADDITIONAL_SUBDOMAINS_FILE="${1:1}"  # Remove @ prefix
    shift
fi

OUTPUT_FILE="${DOMAIN}_zonefile.txt"
TEMP_FILE="/tmp/dns_check_$$"

# Record types to check (CNAME first for optimization)
RECORD_TYPES=("CNAME" "MX" "TXT" "A" "AAAA" "SRV" "NS")

# Hardcoded list of common subdomains (including single letters and numbers)
COMMON_SUBDOMAINS=(
    # Single letters
    "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
    # Single numbers
    "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"
    # Common subdomains
    "www" "mail" "ftp" "webmail" "smtp" "pop" "imap" "ns1" "ns2"
    "ns3" "ns4" "blog" "shop" "app" "api" "dev" "test" "staging"
    "static" "cdn" "assets" "media" "docs" "support" "forum" "help"
    "status" "secure" "account" "my" "portal" "admin" "dashboard" "downloads"
    "uploads" "images" "video" "audio" "files" "store" "shopify" "wordpress"
    "mobile" "old" "new" "beta" "alpha" "demo" "wiki" "git"
)

# Function to query DNS records
query_records() {
    local domain="$1"
    local record_type="$2"
    local output_file="$3"

    case "$record_type" in
        "MX")
            dig +short "$domain" "$record_type" | while read -r line; do
                pref=$(echo "$line" | awk '{print $1}')
                val=$(echo "$line" | awk '{print $2}')
                echo "$domain. IN $record_type $pref $val" >> "$output_file"
            done
            ;;
        "SRV")
            dig +short "$domain" "$record_type" | while read -r line; do
                echo "$domain. IN $record_type $line" >> "$output_file"
            done
            ;;
        "TXT")
            dig +short "$domain" "$record_type" | while read -r line; do
                # Escape quotes in TXT records
                line=$(echo "$line" | sed 's/"/\\"/g')
                echo "$domain. IN $record_type \"$line\"" >> "$output_file"
            done
            ;;
        *)
            dig +short "$domain" "$record_type" | while read -r line; do
                echo "$domain. IN $record_type $line" >> "$output_file"
            done
            ;;
    esac
}

# Function to check if domain has CNAME
has_cname() {
    local domain="$1"
    dig +short "$domain" "CNAME" | grep -q .
    return $?
}

# Function to check all record types for a domain
check_domain() {
    local domain="$1"
    local is_subdomain="$2"
    local temp_file="$3"

    echo -n "Checking $domain..."

    # First check for CNAME (optimization for subdomains)
    if has_cname "$domain"; then
        query_records "$domain" "CNAME" "$temp_file"
        echo " [CNAME found]"
        return 0
    fi

    # If not a CNAME or is main domain, check all records
    for type in "${RECORD_TYPES[@]}"; do
        if [ "$type" != "CNAME" ] || [ "$is_subdomain" != "1" ]; then
            query_records "$domain" "$type" "$temp_file"
        fi
    done
    echo " [Done]"
}

# Main script
echo "Starting DNS check for $DOMAIN"
echo "--------------------------------"

# Check the main domain (always check all records)
check_domain "$DOMAIN" "0" "$TEMP_FILE"

# Check common subdomains
echo -e "\nChecking common subdomains"
echo "--------------------------------"

common_sub_count=0
for subdomain in "${COMMON_SUBDOMAINS[@]}"; do
    full_domain="$subdomain.$DOMAIN"
    ((common_sub_count++))

    # Check if this is a CNAME first
    if ! has_cname "$full_domain"; then
        check_domain "$full_domain" "1" "$TEMP_FILE"
    else
        # Only add CNAME record for subdomains
        echo -n "Checking $full_domain..."
        query_records "$full_domain" "CNAME" "$TEMP_FILE"
        echo " [CNAME found]"
    fi
done

echo -e "\nChecked $common_sub_count common subdomains"

# Check additional subdomains from file if provided
if [ -n "$ADDITIONAL_SUBDOMAINS_FILE" ]; then
    echo -e "\nChecking additional subdomains from $ADDITIONAL_SUBDOMAINS_FILE"
    echo "--------------------------------"

    if [ -f "$ADDITIONAL_SUBDOMAINS_FILE" ]; then
        file_sub_count=0
        while IFS= read -r subdomain || [ -n "$subdomain" ]; do
            # Skip empty lines and comments
            if [[ -n "$subdomain" && ! "$subdomain" =~ ^[[:space:]]*# ]]; then
                # Remove any trailing dot and whitespace
                subdomain=$(echo "$subdomain" | sed 's/[[:space:].]*$//')
                full_domain="$subdomain.$DOMAIN"
                ((file_sub_count++))

                # Skip if this is already in our common subdomains list
                if printf '%s\n' "${COMMON_SUBDOMAINS[@]}" | grep -q "^$subdomain$"; then
                    echo "Skipping $full_domain (already in common subdomains list)"
                    continue
                fi

                # Check if this is a CNAME first
                if ! has_cname "$full_domain"; then
                    check_domain "$full_domain" "1" "$TEMP_FILE"
                else
                    # Only add CNAME record for subdomains
                    echo -n "Checking $full_domain..."
                    query_records "$full_domain" "CNAME" "$TEMP_FILE"
                    echo " [CNAME found]"
                fi
            fi
        done < "$ADDITIONAL_SUBDOMAINS_FILE"

        echo -e "\nChecked $file_sub_count additional subdomains from file"
    else
        echo "Additional subdomains file not found at $ADDITIONAL_SUBDOMAINS_FILE"
    fi
fi

# Check additional subdomains from command line arguments
if [ "$#" -gt 0 ]; then
    echo -e "\nChecking additional subdomains from command line"
    echo "--------------------------------"

    arg_sub_count=0
    for subdomain in "$@"; do
        full_domain="$subdomain.$DOMAIN"
        ((arg_sub_count++))

        # Skip if this is already in our common subdomains list
        if printf '%s\n' "${COMMON_SUBDOMAINS[@]}" | grep -q "^$subdomain$"; then
            echo "Skipping $full_domain (already in common subdomains list)"
            continue
        fi

        # Check if this is a CNAME first
        if ! has_cname "$full_domain"; then
            check_domain "$full_domain" "1" "$TEMP_FILE"
        else
            # Only add CNAME record for subdomains
            echo -n "Checking $full_domain..."
            query_records "$full_domain" "CNAME" "$TEMP_FILE"
            echo " [CNAME found]"
        fi
    done

    echo -e "\nChecked $arg_sub_count additional subdomains from command line"
fi

# Process the temp file to remove duplicates and empty lines
echo -e "\nProcessing results..."
sort -u "$TEMP_FILE" | grep -v "^$" > "${TEMP_FILE}.processed"
mv "${TEMP_FILE}.processed" "$TEMP_FILE"

# Add zone file header
echo -e "\nGenerating zone file..."
{
    echo "; BIND zone file for $DOMAIN"
    echo "; Generated on $(date)"
    echo "\$TTL 3600"
    echo "@ IN SOA ns1.$DOMAIN. admin.$DOMAIN. ("
    echo "    $(date +%Y%m%d%H) ; serial"
    echo "    3600       ; refresh (1 hour)"
    echo "    1800       ; retry (30 minutes)"
    echo "    604800     ; expire (1 week)"
    echo "    86400      ; minimum (1 day)"
    echo "    )"
    echo ""
    cat "$TEMP_FILE"
} > "$OUTPUT_FILE"

# Clean up
rm -f "$TEMP_FILE"

echo -e "\nDNS records have been saved to $OUTPUT_FILE"
echo "Note: Subdomains with CNAME records were not checked for other record types"
